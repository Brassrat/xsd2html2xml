
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml">
<head><style type="text/css">
form fieldset {
	margin-bottom: 10px;
}
form label { 
	display: block;
}
form label > span {
	float: left;
	min-width: 200px;
}
form label > input[required] + span:after, form label > textarea[required] + span:after, form label > select[required] + span:after {
	content: "*:";
}
form button.add {
	margin-bottom: 10px;
}
</style></head>
<body><form action="javascript:void(0);" onsubmit="console.log(htmlToXML(this));&#10;&#9;&#9;&#9;&#9;"><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="rootElement"><legend>Root Element</legend><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="simpleTypes"><legend>Simple xs:* types with default restrictions:</legend><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="string"><input type="text" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value); } else { this.removeAttribute(&quot;value&quot;); };" required="required" pattern=".{0,}" data-xsd2html2xml-primitive="xs:string" data-xsd2html2xml-filled="true" value="abc"/><span>string</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="multiline-string"><textarea onchange="this.textContent = this.value.replace(/\s+/g, &quot; &quot;).trim()" required="required" pattern=".*(\n)?.*" data-xsd2html2xml-filled="true">hello world</textarea><span>multiline-string</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="byte"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="-128" max="127" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:byte" data-xsd2html2xml-filled="true" value="1"/><span>byte (-128 to 127)</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="short"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="-32768" max="32767" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:short" data-xsd2html2xml-filled="true" value="2"/><span>short</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="int"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="-2147483648" max="2147483647" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:int" data-xsd2html2xml-filled="true" value="3"/><span>int</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="long"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="-9223372036854775808" max="9223372036854775807" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:long" data-xsd2html2xml-filled="true" value="0"/><span>long</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="decimal"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" step="0.1" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:decimal" data-xsd2html2xml-filled="true" value="0.5"/><span>decimal</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="float"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" step="0.1" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:float" data-xsd2html2xml-filled="true" value="1.1"/><span>float</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="double"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" step="0.1" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:double" data-xsd2html2xml-filled="true" value="2.2"/><span>double</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="boolean"><input type="checkbox" onchange="if (this.checked) { this.setAttribute(&quot;checked&quot;,&quot;checked&quot;) } else { this.removeAttribute(&quot;checked&quot;) }" required="required" pattern=".{0,}" data-xsd2html2xml-primitive="xs:boolean" data-xsd2html2xml-filled="true" checked="checked"/><span>boolean</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="duration"><output>60</output><input type="range" onchange="this.setAttribute(&quot;value&quot;, &quot;P&quot;.concat(this.value).concat(&quot;&quot;)); this.previousElementSibling.textContent = this.value;" required="required" step="1" data-xsd2html2xml-primitive="xs:duration" data-xsd2html2xml-filled="true" value="PT60S"/><span>duration ()</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="date"><input type="date" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" pattern=".{0,}" data-xsd2html2xml-primitive="xs:date" data-xsd2html2xml-filled="true" value="2017-03-14"/><span>date</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="time"><input type="time" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" step="1" data-xsd2html2xml-primitive="xs:time" data-xsd2html2xml-filled="true" value="02:02:00"/><span>time</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="dateTime"><input type="datetime-local" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" step="1" data-xsd2html2xml-primitive="xs:datetime" data-xsd2html2xml-filled="true" value="2017-03-14T14:02:03"/><span>dateTime</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="anyURI"><input type="url" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" pattern=".{0,}" data-xsd2html2xml-primitive="xs:anyuri" data-xsd2html2xml-filled="true" value="http://www.github.com"/><span>anyURI</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="base64Binary"><input type="file" onchange="var fileReader  = new FileReader(); var o = this; fileReader.onloadend = function () { o.setAttribute(&quot;value&quot;, fileReader.result.substring(5)); }; if(arguments[0].target.files[0]) { fileReader.readAsDataURL(arguments[0].target.files[0]); } else { this.removeAttribute(&quot;value&quot;); }; if (this.getAttribute(&quot;data-xsd2html2xml-required&quot;)) this.setAttribute(&quot;required&quot;, &quot;required&quot;);" data-xsd2html2xml-required="true" pattern=".{0,}" data-xsd2html2xml-primitive="xs:base64binary" data-xsd2html2xml-filled="true" value="text/plain;base64,YmxhYXQ="/><span>base64Binary</span></label></section></fieldset></section><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="dates"><legend>dates</legend><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="date"><input type="date" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" pattern=".{0,}" data-xsd2html2xml-primitive="xs:date" data-xsd2html2xml-filled="true" value="2017-04-03"/><span>date</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="time"><input type="time" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" step="1" data-xsd2html2xml-primitive="xs:time" data-xsd2html2xml-filled="true" value="02:03:04"/><span>time</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="dateTime"><input type="datetime-local" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" step="1" data-xsd2html2xml-primitive="xs:datetime" data-xsd2html2xml-filled="true" value="2017-04-03T14:03:04"/><span>dateTime</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="gDay"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, (this.value.length == 2 ? &quot;---&quot; : &quot;---0&quot;).concat(this.value)) } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="1" max="31" step="1" data-xsd2html2xml-primitive="xs:gday" data-xsd2html2xml-filled="true" value="3"/><span>gDay</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="gMonth"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, (this.value.length == 2 ? &quot;--&quot; : &quot;--0&quot;).concat(this.value)) } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="1" max="12" step="1" data-xsd2html2xml-primitive="xs:gmonth" data-xsd2html2xml-filled="true" value="4"/><span>gMonth</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="gMonthDay"><input type="date" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/^\d+/, &quot;-&quot;)); } else { this.removeAttribute(&quot;value&quot;); };" required="required" pattern=".{0,}" data-xsd2html2xml-primitive="xs:gmonthday" data-xsd2html2xml-filled="true" value="--04-05"/><span>gMonthDay</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="gYear"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="1000" max="9999" step="1" data-xsd2html2xml-primitive="xs:gyear" data-xsd2html2xml-filled="true" value="2017"/><span>gYear</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="gYearMonth"><input type="month" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" pattern=".{0,}" data-xsd2html2xml-primitive="xs:gyearmonth" data-xsd2html2xml-filled="true" value="2017-04"/><span>gYearMonth</span></label></section></fieldset></section><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="durations"><legend>Various durations:</legend><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="dateDuration"><output>0</output><input type="range" onchange="this.setAttribute(&quot;value&quot;, &quot;P&quot;.concat(this.value).concat(&quot;D&quot;)); this.previousElementSibling.textContent = this.value;" required="required" pattern="P\d{4}Y\d{2}M\d{2}D" step="1" data-xsd2html2xml-primitive="xs:duration" data-xsd2html2xml-filled="true" value="P0D"/><span>dateDuration (days)</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="timeDuration"><output>5</output><input type="range" onchange="this.setAttribute(&quot;value&quot;, &quot;PT&quot;.concat(this.value).concat(&quot;M&quot;)); this.previousElementSibling.textContent = this.value;" required="required" min="1" max="10" pattern="PT\d{2}H\d{2}M" step="1" data-xsd2html2xml-primitive="xs:duration" data-xsd2html2xml-filled="true" value="PT5M"/><span>timeDuration (minutes)</span></label></section></fieldset></section><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="defaults"><legend>Simple elements with default and fixed values:</legend><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="defaultString"><input type="text" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value); } else { this.removeAttribute(&quot;value&quot;); };" required="required" pattern=".{0,}" data-xsd2html2xml-primitive="xs:string" data-xsd2html2xml-filled="true" value="this is no longer the default value"/><span>defaultString</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="fixedString"><input type="text" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value); } else { this.removeAttribute(&quot;value&quot;); };" required="required" pattern=".{0,}" data-xsd2html2xml-primitive="xs:string" data-xsd2html2xml-filled="true" value="this is a fixed value"/><span>fixedString</span></label></section></fieldset></section><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="positiveIntegers"><legend>Integers that all allow only positive values:</legend><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="positiveInteger"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="1" max="2147483647" pattern="{0,}" data-xsd2html2xml-primitive="xs:positiveinteger" data-xsd2html2xml-filled="true" value="10"/><span>positiveInteger</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="negativeInteger"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="0" max="2147483647" pattern="{0,}" data-xsd2html2xml-primitive="xs:nonnegativeinteger" data-xsd2html2xml-filled="true" value="10"/><span>negativeInteger</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="unsignedInt"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="0" max="4294967295" pattern="{0,}" data-xsd2html2xml-primitive="xs:unsignedint" data-xsd2html2xml-filled="true" value="10"/><span>unsignedInt</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="integer"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="0" max="2147483647" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:int" data-xsd2html2xml-filled="true" value="10"/><span>integer with min restriction</span></label></section></fieldset></section><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="restrictions"><legend>Simple type with enumerations:</legend><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="enumeration"><select onchange="for (var i=0; i&lt;this.children.length; i++) { this.children[i].removeAttribute(&quot;selected&quot;); } this.children[this.selectedIndex].setAttribute(&quot;selected&quot;,&quot;selected&quot;);" required="required" data-xsd2html2xml-filled="true"><option value="Option 1">Option 1</option><option selected="selected" value="Option 2">Custom labeled option 2</option><option value="Option 3">Option 3</option></select><span>enumeration</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="fixed-enumeration"><select onchange="for (var i=0; i&lt;this.children.length; i++) { this.children[i].removeAttribute(&quot;selected&quot;); } this.children[this.selectedIndex].setAttribute(&quot;selected&quot;,&quot;selected&quot;);" required="required" data-xsd2html2xml-filled="true"><option disabled="disabled" value="Option 1">Option 1</option><option disabled="disabled" value="Option 2">Option 2</option><option selected="selected" value="Option 3">Option 3</option></select><span>fixed-enumeration</span></label></section></fieldset></section><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="extensions"><legend>Various nested (and double nested) extensions:</legend><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="nestedString"><select onchange="for (var i=0; i&lt;this.children.length; i++) { this.children[i].removeAttribute(&quot;selected&quot;); } this.children[this.selectedIndex].setAttribute(&quot;selected&quot;,&quot;selected&quot;);" required="required" data-xsd2html2xml-filled="true"><option value="nestedString Option 1">nestedString Option 1</option><option selected="selected" value="nestedString Option 2">nestedString Option 2</option></select><span>nestedString-type determines the enumaration values</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="nestedByte"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="0" max="127" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:byte" data-xsd2html2xml-filled="true" value="0"/><span>nestedByte-type restricts the byte to min=0</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="doubleNestedByte"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="0" max="10" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:byte" data-xsd2html2xml-filled="true" value="10"/><span>doubleNestedByte-type restricts nestedByte to max=10</span></label></section></fieldset></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="occurrencesSimple"><input type="text" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value); } else { this.removeAttribute(&quot;value&quot;); };" required="required" pattern=".{0,}" data-xsd2html2xml-primitive="xs:string" data-xsd2html2xml-filled="true" value="a"/><span>Recurring simple<button type="button" class="remove" onclick="&#10;&#9;&#9;&#9;&#9;&#9;if ((this.parentNode.parentNode.parentNode.children.length - 2) == this.parentNode.parentNode.parentNode.lastElementChild.getAttribute(&quot;data-xsd2html2xml-min&quot;))&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode.parentNode.lastElementChild.click();&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;if ((this.parentNode.parentNode.parentNode.children.length - 2) == this.parentNode.parentNode.parentNode.lastElementChild.getAttribute(&quot;data-xsd2html2xml-max&quot;))&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode.parentNode.lastElementChild.removeAttribute(&quot;disabled&quot;);&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode.parentNode.removeChild(&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode&#10;&#9;&#9;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;&#9;">Remove</button></span></label><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="occurrencesSimple"><input type="text" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value); } else { this.removeAttribute(&quot;value&quot;); };" required="required" pattern=".{0,}" data-xsd2html2xml-primitive="xs:string" data-xsd2html2xml-filled="true" value="b"/><span>Recurring simple<button type="button" class="remove" onclick="&#10;&#9;&#9;&#9;&#9;&#9;if ((this.parentNode.parentNode.parentNode.children.length - 2) == this.parentNode.parentNode.parentNode.lastElementChild.getAttribute(&quot;data-xsd2html2xml-min&quot;))&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode.parentNode.lastElementChild.click();&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;if ((this.parentNode.parentNode.parentNode.children.length - 2) == this.parentNode.parentNode.parentNode.lastElementChild.getAttribute(&quot;data-xsd2html2xml-max&quot;))&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode.parentNode.lastElementChild.removeAttribute(&quot;disabled&quot;);&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode.parentNode.removeChild(&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode&#10;&#9;&#9;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;&#9;">Remove</button></span></label><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="occurrencesSimple"><input type="text" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value); } else { this.removeAttribute(&quot;value&quot;); };" required="required" pattern=".{0,}" data-xsd2html2xml-primitive="xs:string" data-xsd2html2xml-filled="true" value="c"/><span>Recurring simple<button type="button" class="remove" onclick="&#10;&#9;&#9;&#9;&#9;&#9;if ((this.parentNode.parentNode.parentNode.children.length - 2) == this.parentNode.parentNode.parentNode.lastElementChild.getAttribute(&quot;data-xsd2html2xml-min&quot;))&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode.parentNode.lastElementChild.click();&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;if ((this.parentNode.parentNode.parentNode.children.length - 2) == this.parentNode.parentNode.parentNode.lastElementChild.getAttribute(&quot;data-xsd2html2xml-max&quot;))&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode.parentNode.lastElementChild.removeAttribute(&quot;disabled&quot;);&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode.parentNode.removeChild(&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode&#10;&#9;&#9;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;&#9;">Remove</button></span></label><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="occurrencesSimple" style="display: none;"><input type="text" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value); } else { this.removeAttribute(&quot;value&quot;); };" required="required" pattern=".{0,}" disabled="disabled" data-xsd2html2xml-primitive="xs:string"/><span>Recurring simple<button type="button" class="remove" onclick="&#10;&#9;&#9;&#9;&#9;&#9;if ((this.parentNode.parentNode.parentNode.children.length - 2) == this.parentNode.parentNode.parentNode.lastElementChild.getAttribute(&quot;data-xsd2html2xml-min&quot;))&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode.parentNode.lastElementChild.click();&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;if ((this.parentNode.parentNode.parentNode.children.length - 2) == this.parentNode.parentNode.parentNode.lastElementChild.getAttribute(&quot;data-xsd2html2xml-max&quot;))&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode.parentNode.lastElementChild.removeAttribute(&quot;disabled&quot;);&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode.parentNode.removeChild(&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode&#10;&#9;&#9;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;&#9;">Remove</button></span></label><button type="button" class="add" data-xsd2html2xml-min="1" data-xsd2html2xml-max="3" onclick="&#10;&#9;&#9;&#9;&#9;&#9;var newNode = this.previousElementSibling.cloneNode(true);&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;for (var i=0; i&lt;newNode.querySelectorAll(&quot;input, select&quot;).length; i++) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;newNode.querySelectorAll(&quot;input, select&quot;)[i].removeAttribute(&quot;disabled&quot;);&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;newNode.removeAttribute(&quot;style&quot;);&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;this.parentNode.insertBefore(&#10;&#9;&#9;&#9;&#9;&#9;&#9;newNode, this.previousElementSibling&#10;&#9;&#9;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;if ((this.parentNode.children.length - 2) == this.getAttribute(&quot;data-xsd2html2xml-max&quot;))&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.setAttribute(&quot;disabled&quot;, &quot;disabled&quot;);&#10;&#9;&#9;&#9;&#9;">New Recurring simple</button></section><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="occurrencesComplex"><legend>Recurring complex<button type="button" class="remove" onclick="&#10;&#9;&#9;&#9;&#9;&#9;if ((this.parentNode.parentNode.parentNode.children.length - 2) == this.parentNode.parentNode.parentNode.lastElementChild.getAttribute(&quot;data-xsd2html2xml-min&quot;))&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode.parentNode.lastElementChild.click();&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;if ((this.parentNode.parentNode.parentNode.children.length - 2) == this.parentNode.parentNode.parentNode.lastElementChild.getAttribute(&quot;data-xsd2html2xml-max&quot;))&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode.parentNode.lastElementChild.removeAttribute(&quot;disabled&quot;);&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode.parentNode.removeChild(&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode&#10;&#9;&#9;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;&#9;">Remove</button></legend><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="child"><legend>child</legend><label data-xsd2html2xml-type="attribute" data-xsd2html2xml-name="attribute"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" min="-128" max="127" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:byte" data-xsd2html2xml-filled="true" value="1"/><span>attribute</span></label></fieldset></section></fieldset><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="occurrencesComplex"><legend>Recurring complex<button type="button" class="remove" onclick="&#10;&#9;&#9;&#9;&#9;&#9;if ((this.parentNode.parentNode.parentNode.children.length - 2) == this.parentNode.parentNode.parentNode.lastElementChild.getAttribute(&quot;data-xsd2html2xml-min&quot;))&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode.parentNode.lastElementChild.click();&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;if ((this.parentNode.parentNode.parentNode.children.length - 2) == this.parentNode.parentNode.parentNode.lastElementChild.getAttribute(&quot;data-xsd2html2xml-max&quot;))&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode.parentNode.lastElementChild.removeAttribute(&quot;disabled&quot;);&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode.parentNode.removeChild(&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode&#10;&#9;&#9;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;&#9;">Remove</button></legend><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="child"><legend>child</legend><label data-xsd2html2xml-type="attribute" data-xsd2html2xml-name="attribute"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" min="-128" max="127" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:byte" data-xsd2html2xml-filled="true" value="2"/><span>attribute</span></label></fieldset></section></fieldset><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="occurrencesComplex"><legend>Recurring complex<button type="button" class="remove" onclick="&#10;&#9;&#9;&#9;&#9;&#9;if ((this.parentNode.parentNode.parentNode.children.length - 2) == this.parentNode.parentNode.parentNode.lastElementChild.getAttribute(&quot;data-xsd2html2xml-min&quot;))&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode.parentNode.lastElementChild.click();&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;if ((this.parentNode.parentNode.parentNode.children.length - 2) == this.parentNode.parentNode.parentNode.lastElementChild.getAttribute(&quot;data-xsd2html2xml-max&quot;))&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode.parentNode.lastElementChild.removeAttribute(&quot;disabled&quot;);&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode.parentNode.removeChild(&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode&#10;&#9;&#9;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;&#9;">Remove</button></legend><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="child"><legend>child</legend><label data-xsd2html2xml-type="attribute" data-xsd2html2xml-name="attribute"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" min="-128" max="127" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:byte" data-xsd2html2xml-filled="true" value="3"/><span>attribute</span></label></fieldset></section></fieldset><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="occurrencesComplex" style="display: none;"><legend>Recurring complex<button type="button" class="remove" onclick="&#10;&#9;&#9;&#9;&#9;&#9;if ((this.parentNode.parentNode.parentNode.children.length - 2) == this.parentNode.parentNode.parentNode.lastElementChild.getAttribute(&quot;data-xsd2html2xml-min&quot;))&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode.parentNode.lastElementChild.click();&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;if ((this.parentNode.parentNode.parentNode.children.length - 2) == this.parentNode.parentNode.parentNode.lastElementChild.getAttribute(&quot;data-xsd2html2xml-max&quot;))&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode.parentNode.lastElementChild.removeAttribute(&quot;disabled&quot;);&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode.parentNode.removeChild(&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.parentNode.parentNode&#10;&#9;&#9;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;&#9;">Remove</button></legend><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="child"><legend>child</legend><label data-xsd2html2xml-type="attribute" data-xsd2html2xml-name="attribute"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" min="-128" max="127" pattern="[-]?{0,}" disabled="disabled" data-xsd2html2xml-primitive="xs:byte"/><span>attribute</span></label></fieldset></section></fieldset><button type="button" class="add" data-xsd2html2xml-min="1" data-xsd2html2xml-max="3" onclick="&#10;&#9;&#9;&#9;&#9;&#9;var newNode = this.previousElementSibling.cloneNode(true);&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;for (var i=0; i&lt;newNode.querySelectorAll(&quot;input, select&quot;).length; i++) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;newNode.querySelectorAll(&quot;input, select&quot;)[i].removeAttribute(&quot;disabled&quot;);&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;newNode.removeAttribute(&quot;style&quot;);&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;this.parentNode.insertBefore(&#10;&#9;&#9;&#9;&#9;&#9;&#9;newNode, this.previousElementSibling&#10;&#9;&#9;&#9;&#9;&#9;);&#10;&#9;&#9;&#9;&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;if ((this.parentNode.children.length - 2) == this.getAttribute(&quot;data-xsd2html2xml-max&quot;))&#10;&#9;&#9;&#9;&#9;&#9;&#9;this.setAttribute(&quot;disabled&quot;, &quot;disabled&quot;);&#10;&#9;&#9;&#9;&#9;">New Recurring complex</button></section><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="complexSimpleContent"><legend>Complex element with simple content</legend><label data-xsd2html2xml-type="cdata" data-xsd2html2xml-name="complexSimpleContent"><input type="text" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value); } else { this.removeAttribute(&quot;value&quot;); };" required="required" pattern=".{0,}" data-xsd2html2xml-primitive="xs:string" data-xsd2html2xml-filled="true" value="simple content"/><span>Complex element with simple content</span></label><label data-xsd2html2xml-type="attribute" data-xsd2html2xml-name="attribute"><input type="text" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value); } else { this.removeAttribute(&quot;value&quot;); };" required="required" pattern=".{0,}" data-xsd2html2xml-primitive="xs:string" data-xsd2html2xml-filled="true" value="attribute"/><span>attribute</span></label></fieldset></section><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="choice"><legend>Element with xs:choice:</legend><label><input type="radio" name="N10123" onclick="&#10;&#9;&#9;&#9;&#9;&#9;for (var i=0; i&lt;document.querySelectorAll(&quot;[name='N10123']&quot;).length; i++) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;var e = document.querySelectorAll(&quot;[name='N10123']&quot;)[i];&#10;&#9;&#9;&#9;&#9;&#9;&#9;e.removeAttribute(&quot;checked&quot;);&#10;&#9;&#9;&#9;&#9;&#9;&#9;for (var j=0; j&lt;e.parentElement.nextElementSibling.querySelectorAll(&quot;input, select&quot;).length; j++) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if (this.parentElement.nextElementSibling.contains(e.parentElement.nextElementSibling.querySelectorAll(&quot;input, select&quot;)[j]))&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;e.parentElement.nextElementSibling.querySelectorAll(&quot;input, select&quot;)[j].removeAttribute(&quot;disabled&quot;);&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;else&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;e.parentElement.nextElementSibling.querySelectorAll(&quot;input, select&quot;)[j].setAttribute(&quot;disabled&quot;, &quot;disabled&quot;);&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;this.setAttribute(&quot;checked&quot;,&quot;checked&quot;);"/><span>byte</span></label><section data-xsd2html2xml-choice="true"><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="byte"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="-128" max="127" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:byte" data-xsd2html2xml-filled="true" value="1"/><span>byte</span></label></section><label><input type="radio" name="N10123" onclick="&#10;&#9;&#9;&#9;&#9;&#9;for (var i=0; i&lt;document.querySelectorAll(&quot;[name='N10123']&quot;).length; i++) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;var e = document.querySelectorAll(&quot;[name='N10123']&quot;)[i];&#10;&#9;&#9;&#9;&#9;&#9;&#9;e.removeAttribute(&quot;checked&quot;);&#10;&#9;&#9;&#9;&#9;&#9;&#9;for (var j=0; j&lt;e.parentElement.nextElementSibling.querySelectorAll(&quot;input, select&quot;).length; j++) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if (this.parentElement.nextElementSibling.contains(e.parentElement.nextElementSibling.querySelectorAll(&quot;input, select&quot;)[j]))&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;e.parentElement.nextElementSibling.querySelectorAll(&quot;input, select&quot;)[j].removeAttribute(&quot;disabled&quot;);&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;else&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;e.parentElement.nextElementSibling.querySelectorAll(&quot;input, select&quot;)[j].setAttribute(&quot;disabled&quot;, &quot;disabled&quot;);&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;this.setAttribute(&quot;checked&quot;,&quot;checked&quot;);"/><span>short</span></label><section data-xsd2html2xml-choice="true"><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="short"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="-32768" max="32767" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:short"/><span>short</span></label></section><label><input type="radio" name="N10123" onclick="&#10;&#9;&#9;&#9;&#9;&#9;for (var i=0; i&lt;document.querySelectorAll(&quot;[name='N10123']&quot;).length; i++) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;var e = document.querySelectorAll(&quot;[name='N10123']&quot;)[i];&#10;&#9;&#9;&#9;&#9;&#9;&#9;e.removeAttribute(&quot;checked&quot;);&#10;&#9;&#9;&#9;&#9;&#9;&#9;for (var j=0; j&lt;e.parentElement.nextElementSibling.querySelectorAll(&quot;input, select&quot;).length; j++) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if (this.parentElement.nextElementSibling.contains(e.parentElement.nextElementSibling.querySelectorAll(&quot;input, select&quot;)[j]))&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;e.parentElement.nextElementSibling.querySelectorAll(&quot;input, select&quot;)[j].removeAttribute(&quot;disabled&quot;);&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;else&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;e.parentElement.nextElementSibling.querySelectorAll(&quot;input, select&quot;)[j].setAttribute(&quot;disabled&quot;, &quot;disabled&quot;);&#10;&#9;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;&#9;this.setAttribute(&quot;checked&quot;,&quot;checked&quot;);"/><span>long</span></label><section data-xsd2html2xml-choice="true"><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="long"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="-9223372036854775808" max="9223372036854775807" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:long"/><span>long</span></label></section></fieldset></section></fieldset></section><input type="submit" value="Submit"/><link rel="stylesheet" type="text/css" href="style.css"/><script type="text/javascript"> 
							if (!Element.prototype.matches) Element.prototype.matches = Element.prototype.msMatchesSelector; if (!Element.prototype.closest) Element.prototype.closest = function (selector) {     var el = this;     while (el) {         if (el.matches(selector)) {             return el;         }         el = el.parentElement;     } };
							for (var i=0; i&lt;document.querySelectorAll("[data-xsd2html2xml-filled]").length; i++) { if (document.querySelectorAll("[data-xsd2html2xml-filled]")[i].closest("[data-xsd2html2xml-choice]")) document.querySelectorAll("[data-xsd2html2xml-filled]")[i].closest("[data-xsd2html2xml-choice]").previousElementSibling.querySelector("input[type='radio']").click(); }
							
							for (var i=0; i&lt;document.querySelectorAll("[type='range']").length; i++) {
								if (document.querySelectorAll("[type='range']")[i].getAttribute("value")) {
									document.querySelectorAll("[type='range']")[i].value = document.querySelectorAll("[type='range']")[i].getAttribute("value").replace(/\D/g, "");
								} else if (document.querySelectorAll("[type='range']")[i].getAttribute("min")) {
									document.querySelectorAll("[type='range']")[i].value = document.querySelectorAll("[type='range']")[i].getAttribute("min");
								} else if (document.querySelectorAll("[type='range']")[i].getAttribute("max")) {
									document.querySelectorAll("[type='range']")[i].value = document.querySelectorAll("[type='range']")[i].getAttribute("max");
								} else {
									document.querySelectorAll("[type='range']")[i].value = 0; document.querySelectorAll("[type='range']")[i].onchange();
								}
							}
							
							for (var i=0; i&lt;document.querySelectorAll("[data-xsd2html2xml-primitive='xs:gday']").length; i++) {
								document.querySelectorAll("[data-xsd2html2xml-primitive='xs:gday']")[i].value = document.querySelectorAll("[data-xsd2html2xml-primitive='xs:gday']")[i].getAttribute("value").replace(/\D/g, "");
							}
							
							for (var i=0; i&lt;document.querySelectorAll("[data-xsd2html2xml-primitive='xs:gmonth']").length; i++) {
								document.querySelectorAll("[data-xsd2html2xml-primitive='xs:gmonth']")[i].value = document.querySelectorAll("[data-xsd2html2xml-primitive='xs:gmonth']")[i].getAttribute("value").replace(/\D/g, "");
							}
							
							for (var i=0; i&lt;document.querySelectorAll("[data-xsd2html2xml-primitive='xs:gmonthday']").length; i++) {
								document.querySelectorAll("[data-xsd2html2xml-primitive='xs:gmonthday']")[i].value = new Date().getFullYear().toString().concat(document.querySelectorAll("[data-xsd2html2xml-primitive='xs:gmonthday']")[i].getAttribute("value").substring(1));
							}
							
							var htmlToXML = function(root) {
							    return "&lt;?xml version=\"1.0\"?&gt;".concat(getXML(root));
							};
							var getXML = function(parent, attributesOnly) {
							    var xml = "";
							    for (var i = 0; i &lt; parent.children.length; i++) {
							        if (!parent.children[i].getAttribute("style")) {
							            switch (parent.children[i].getAttribute("data-xsd2html2xml-type")) {
							                case "element":
							                    if (!attributesOnly) xml = xml.concat("&lt;").concat(parent.children[i].getAttribute("data-xsd2html2xml-name")).concat(getXML(parent.children[i], true)).concat("&gt;").concat(function() {
							                        if (parent.children[i].nodeName.toLowerCase() === "label") {
							                            return getContent(parent.children[i]);
							                        } else return getXML(parent.children[i])
							                    }()).concat("&lt;/").concat(parent.children[i].getAttribute("data-xsd2html2xml-name")).concat("&gt;");
							                    break;
							                case "attribute":
							                    if (attributesOnly)
													if (getContent(parent.children[i]))
														xml = xml.concat(" ").concat(parent.children[i].getAttribute("data-xsd2html2xml-name")).concat("=\"").concat(getContent(parent.children[i])).concat("\"");
							                    break;
							                case "cdata":
							                    if (!attributesOnly) xml = xml.concat(getContent(parent.children[i]));
							                    break;
							                default:
							                    if (!attributesOnly)
							                        if (!parent.children[i].getAttribute("data-xsd2html2xml-choice") || (parent.children[i].getAttribute("data-xsd2html2xml-choice") &amp;&amp; parent.children[i].previousElementSibling.getElementsByTagName("input")[0].checked)) xml = xml.concat(getXML(parent.children[i]));
							                    break;
							            }
							        }
							    }
							    return xml;
							};
							var getContent = function(node) {
							    if (node.getElementsByTagName("input").length &gt; 0) {
							        switch (node.getElementsByTagName("input")[0].getAttribute("type").toLowerCase()) {
							            case "checkbox":
							                return node.getElementsByTagName("input")[0].checked;
							            case "file":
							            case "range":
							            case "date":
							            	return node.getElementsByTagName("input")[0].getAttribute("value");
							            default:
							                return node.getElementsByTagName("input")[0].value;
							        }
							    } else if (node.getElementsByTagName("select").length &gt; 0) {
							        return node.getElementsByTagName("select")[0].value;
							    } else if (node.getElementsByTagName("textarea").length &gt; 0) {
							    	return node.getElementsByTagName("textarea")[0].value;
							    }
							}
						</script></form></body></html>
