<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml">
<head><style type="text/css">
form fieldset {
	margin-bottom: 10px;
}
form label { 
	display: block;
}
form label > span {
	float: left;
	min-width: 200px;
}
form label > input[required] + span:after, form label > textarea[required] + span:after, form label > select[required] + span:after {
	content: "*:";
}
form button.add {
	margin-bottom: 10px;
}
</style></head>
<body><form action="javascript:void(0);" onsubmit="console.log(htmlToXML(this));&#10;&#9;&#9;&#9;&#9;"><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="rootElement"><legend>Root Element</legend><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="simpleTypes"><legend>Simple xs:* types with default restrictions:</legend><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="string"><input type="text" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value); } else { this.removeAttribute(&quot;value&quot;); };" required="required" pattern=".{0,}" data-xsd2html2xml-primitive="xs:string"/><span>string</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="multiline-string"><textarea onchange="this.textContent = this.value.replace(/\s+/g, &quot; &quot;).trim()" required="required" pattern=".*(\n)?.*">hello</textarea><span>multiline-string</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="byte"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="-128" max="127" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:byte"/><span>byte (-128 to 127)</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="short"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="-32768" max="32767" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:short"/><span>short</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="int"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="-2147483648" max="2147483647" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:int"/><span>int</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="long"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="-9223372036854775808" max="9223372036854775807" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:long"/><span>long</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="decimal"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" step="0.1" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:decimal"/><span>decimal</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="float"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" step="0.1" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:float"/><span>float</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="double"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" step="0.1" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:double"/><span>double</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="boolean"><input type="checkbox" onchange="if (this.checked) { this.setAttribute(&quot;checked&quot;,&quot;checked&quot;) } else { this.removeAttribute(&quot;checked&quot;) }" required="required" pattern=".{0,}" data-xsd2html2xml-primitive="xs:boolean"/><span>boolean</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="date"><input type="date" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" pattern=".{0,}" data-xsd2html2xml-primitive="xs:date"/><span>date</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="time"><input type="time" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, (this.value.match(/.*\d\d:\d\d:\d\d/) ? this.value : this.value.concat(&quot;:00&quot;))); } else { this.removeAttribute(&quot;value&quot;); };" required="required" step="1" data-xsd2html2xml-primitive="xs:time"/><span>time</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="dateTime"><input type="datetime-local" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, (this.value.match(/.*\d\d:\d\d:\d\d/) ? this.value : this.value.concat(&quot;:00&quot;))); } else { this.removeAttribute(&quot;value&quot;); };" required="required" step="1" data-xsd2html2xml-primitive="xs:datetime"/><span>dateTime</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="anyURI"><input type="url" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" pattern=".{0,}" data-xsd2html2xml-primitive="xs:anyuri"/><span>anyURI</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="base64Binary"><input type="file" onchange="var fileReader = new FileReader(); var o = this; fileReader.onloadend = function () { o.setAttribute(&quot;value&quot;, fileReader.result.substring(fileReader.result.indexOf(&quot;base64,&quot;) + 7)); }; if(arguments[0].target.files[0]) { fileReader.readAsDataURL(arguments[0].target.files[0]); } else { this.removeAttribute(&quot;value&quot;); }; if (this.getAttribute(&quot;data-xsd2html2xml-required&quot;)) this.setAttribute(&quot;required&quot;, &quot;required&quot;);" required="required" pattern=".{0,}" data-xsd2html2xml-primitive="xs:base64binary"/><span>base64Binary</span></label></section></fieldset></section><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="dates"><legend>dates</legend><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="date"><input type="date" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" pattern=".{0,}" data-xsd2html2xml-primitive="xs:date"/><span>date</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="time"><input type="time" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, (this.value.match(/.*\d\d:\d\d:\d\d/) ? this.value : this.value.concat(&quot;:00&quot;))); } else { this.removeAttribute(&quot;value&quot;); };" required="required" step="1" data-xsd2html2xml-primitive="xs:time"/><span>time</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="dateTime"><input type="datetime-local" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, (this.value.match(/.*\d\d:\d\d:\d\d/) ? this.value : this.value.concat(&quot;:00&quot;))); } else { this.removeAttribute(&quot;value&quot;); };" required="required" step="1" data-xsd2html2xml-primitive="xs:datetime"/><span>dateTime</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="gDay"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, (this.value.length == 2 ? &quot;---&quot; : &quot;---0&quot;).concat(this.value)); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="1" max="31" step="1" data-xsd2html2xml-primitive="xs:gday"/><span>gDay</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="gMonth"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, (this.value.length == 2 ? &quot;--&quot; : &quot;--0&quot;).concat(this.value)); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="1" max="12" step="1" data-xsd2html2xml-primitive="xs:gmonth"/><span>gMonth</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="gMonthEnum"><select onchange="this.childNodes.forEach(function(o) { o.removeAttribute(&quot;selected&quot;); }); this.children[this.selectedIndex].setAttribute(&quot;selected&quot;,&quot;selected&quot;);" required="required"><option value="--01">January</option><option value="--02">February</option><option value="--03">March</option></select><span>gMonth as enumeration</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="gMonthDay"><input type="date" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/^\d+/, &quot;-&quot;)); } else { this.removeAttribute(&quot;value&quot;); };" required="required" pattern=".{0,}" data-xsd2html2xml-primitive="xs:gmonthday"/><span>gMonthDay</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="gYear"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="1000" max="9999" step="1" data-xsd2html2xml-primitive="xs:gyear"/><span>gYear</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="gYearMonth"><input type="month" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" pattern=".{0,}" data-xsd2html2xml-primitive="xs:gyearmonth"/><span>gYearMonth</span></label></section></fieldset></section><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="durations"><legend>Various durations:</legend><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="dateDuration"><output/><input type="range" onchange="this.setAttribute(&quot;value&quot;, &quot;P&quot;.concat(this.value).concat(&quot;D&quot;)); this.previousElementSibling.textContent = this.value;" required="required" pattern="P\d{1,3}D" step="1" data-xsd2html2xml-primitive="xs:duration"/><span>dateDuration (days)</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="timeDuration"><output/><input type="range" onchange="this.setAttribute(&quot;value&quot;, &quot;PT&quot;.concat(this.value).concat(&quot;M&quot;)); this.previousElementSibling.textContent = this.value;" required="required" min="1" max="10" pattern="PT\d{1,2}M" step="1" data-xsd2html2xml-primitive="xs:duration"/><span>timeDuration (minutes)</span></label></section></fieldset></section><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="defaults"><legend>Simple elements with default and fixed values:</legend><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="defaultString"><input type="text" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value); } else { this.removeAttribute(&quot;value&quot;); };" required="required" pattern=".{0,}" data-xsd2html2xml-primitive="xs:string" value="this is the default value"/><span>defaultString</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="fixedString"><input type="text" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value); } else { this.removeAttribute(&quot;value&quot;); };" required="required" pattern=".{0,}" data-xsd2html2xml-primitive="xs:string" readonly="readonly" value="this is a fixed value"/><span>fixedString</span></label></section></fieldset></section><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="positiveIntegers"><legend>Integers that all allow only positive values:</legend><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="positiveInteger"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="1" max="2147483647" pattern="{0,}" data-xsd2html2xml-primitive="xs:positiveinteger"/><span>positiveInteger</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="negativeInteger"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="0" max="2147483647" pattern="{0,}" data-xsd2html2xml-primitive="xs:nonnegativeinteger"/><span>negativeInteger</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="unsignedInt"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="0" max="4294967295" pattern="{0,}" data-xsd2html2xml-primitive="xs:unsignedint"/><span>unsignedInt</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="integer"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="0" max="2147483647" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:int"/><span>integer with min restriction</span></label></section></fieldset></section><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="restrictions"><legend>Simple type with enumerations:</legend><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="enumeration"><select onchange="this.childNodes.forEach(function(o) { o.removeAttribute(&quot;selected&quot;); }); this.children[this.selectedIndex].setAttribute(&quot;selected&quot;,&quot;selected&quot;);" required="required"><option value="Option 1">Option 1</option><option value="Option 2">Custom labeled option 2</option><option value="Option 3">Option 3</option></select><span>enumeration</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="fixed-enumeration"><select onchange="this.childNodes.forEach(function(o) { o.removeAttribute(&quot;selected&quot;); }); this.children[this.selectedIndex].setAttribute(&quot;selected&quot;,&quot;selected&quot;);" required="required"><option disabled="disabled" value="Option 1">Option 1</option><option disabled="disabled" value="Option 2">Option 2</option><option selected="selected" value="Option 3">Option 3</option></select><span>fixed-enumeration</span></label></section></fieldset></section><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="extensions"><legend>Various nested (and double nested) extensions:</legend><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="nestedString"><select onchange="this.childNodes.forEach(function(o) { o.removeAttribute(&quot;selected&quot;); }); this.children[this.selectedIndex].setAttribute(&quot;selected&quot;,&quot;selected&quot;);" required="required"><option value="nestedString Option 1">nestedString Option 1</option><option value="nestedString Option 2">nestedString Option 2</option></select><span>nestedString-type determines the enumaration values</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="nestedByte"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="0" max="127" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:byte"/><span>nestedByte-type restricts the byte to min=0</span></label></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="doubleNestedByte"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="0" max="10" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:byte"/><span>doubleNestedByte-type restricts nestedByte to max=10</span></label></section></fieldset></section><section><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="occurrencesSimple"><input type="text" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value); } else { this.removeAttribute(&quot;value&quot;); };" required="required" pattern=".{0,}" data-xsd2html2xml-primitive="xs:string"/><span>Recurring simple<button type="button" class="remove" onclick="clickRemoveButton(this);">-</button></span></label><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="occurrencesSimple" style="display: none;"><input type="text" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value); } else { this.removeAttribute(&quot;value&quot;); };" required="required" pattern=".{0,}" disabled="disabled" data-xsd2html2xml-primitive="xs:string"/><span>Recurring simple<button type="button" class="remove" onclick="clickRemoveButton(this);">-</button></span></label><button type="button" class="add" data-xsd2html2xml-min="1" data-xsd2html2xml-max="3" onclick="clickAddButton(this);">+ Recurring simple</button></section><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="occurrencesComplex"><legend>Recurring complex<button type="button" class="remove" onclick="clickRemoveButton(this);">-</button></legend><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="child"><legend>child</legend><label data-xsd2html2xml-type="attribute" data-xsd2html2xml-name="attribute"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" min="-128" max="127" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:byte"/><span>attribute</span></label></fieldset></section></fieldset><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="occurrencesComplex" style="display: none;"><legend>Recurring complex<button type="button" class="remove" onclick="clickRemoveButton(this);">-</button></legend><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="child"><legend>child</legend><label data-xsd2html2xml-type="attribute" data-xsd2html2xml-name="attribute"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" min="-128" max="127" pattern="[-]?{0,}" disabled="disabled" data-xsd2html2xml-primitive="xs:byte"/><span>attribute</span></label></fieldset></section></fieldset><button type="button" class="add" data-xsd2html2xml-min="1" data-xsd2html2xml-max="3" onclick="clickAddButton(this);">+ Recurring complex</button></section><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="complexSimpleContent"><legend>Complex element with simple content</legend><label data-xsd2html2xml-type="cdata" data-xsd2html2xml-name="complexSimpleContent"><input type="text" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value); } else { this.removeAttribute(&quot;value&quot;); };" required="required" pattern=".{0,}" data-xsd2html2xml-primitive="xs:string"/><span>Complex element with simple content</span></label><label data-xsd2html2xml-type="attribute" data-xsd2html2xml-name="attribute"><input type="text" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value); } else { this.removeAttribute(&quot;value&quot;); };" required="required" pattern=".{0,}" data-xsd2html2xml-primitive="xs:string"/><span>attribute</span></label></fieldset></section><section><fieldset data-xsd2html2xml-type="element" data-xsd2html2xml-name="choice"><legend>Element with xs:choice:</legend><label><input type="radio" name="N10136" onclick="clickRadioInput(this, 'N10136');"/><span>byte</span></label><section data-xsd2html2xml-choice="true"><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="byte"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="-128" max="127" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:byte"/><span>byte</span></label></section><label><input type="radio" name="N10136" onclick="clickRadioInput(this, 'N10136');"/><span>short</span></label><section data-xsd2html2xml-choice="true"><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="short"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="-32768" max="32767" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:short"/><span>short</span></label></section><label><input type="radio" name="N10136" onclick="clickRadioInput(this, 'N10136');"/><span>long</span></label><section data-xsd2html2xml-choice="true"><label data-xsd2html2xml-type="element" data-xsd2html2xml-name="long"><input type="number" onchange="if (this.value) { this.setAttribute(&quot;value&quot;, this.value.replace(/\s+/g, &quot; &quot;).trim()); } else { this.removeAttribute(&quot;value&quot;); };" required="required" min="-9223372036854775808" max="9223372036854775807" pattern="[-]?{0,}" data-xsd2html2xml-primitive="xs:long"/><span>long</span></label></section></fieldset></section></fieldset></section><input type="submit" value="OK"/><link rel="stylesheet" type="text/css" href="style.css"/><script type="text/javascript">
					/* add .forEach is not natively supported */
					if (!NodeList.prototype.forEach) {
						NodeList.prototype.forEach = function(callback){
							var i = 0;
							while (i != this.length) {
								callback.apply(this, [this[i], i, this]);
								i++;
							}
						};
					}
					
					/* VALUE SETTERS */
					
					/* specifically set values on ranges */
					document.querySelectorAll("[type='range']").forEach(function(o) {
						if (o.getAttribute("value")) {
							o.value = o.getAttribute("value").replace(/\D/g, "");
						} else if (o.getAttribute("min")) {
							o.value = o.getAttribute("min");
						} else if (o.getAttribute("max")) {
							o.value = o.getAttribute("max");
						} else {
							o.value = 0;
							o.onchange();
						}
					});
					
					/* specifically set values on datepickers */
					document.querySelectorAll("[data-xsd2html2xml-primitive='xs:gday']").forEach(function(o) {
						if (o.getAttribute("value")) {
							o.value = o.getAttribute("value").replace(/-+0?/g, "");
						}
					});
					document.querySelectorAll("[data-xsd2html2xml-primitive='xs:gmonth']").forEach(function(o) {
						if (o.getAttribute("value")) {
							o.value = o.getAttribute("value").replace(/-+0?/g, "");
						}
					});
					document.querySelectorAll("[data-xsd2html2xml-primitive='xs:gmonthday']").forEach(function(o) {
						if (o.getAttribute("value")) {
							o.value = new Date().getFullYear().toString().concat(o.getAttribute("value").substring(1));
						}
					});
					
					/* EVENT HANDLERS */
					
					var clickAddButton = function(button) {
						var newNode = button.previousElementSibling.cloneNode(true);
						
						newNode.querySelectorAll("input, select").forEach(function(o) {
							o.removeAttribute("disabled");
						});
						
						newNode.removeAttribute("style");
						
						button.parentNode.insertBefore(
							newNode, button.previousElementSibling
						);
						
						if ((button.parentNode.children.length - 2) == button.getAttribute("data-xsd2html2xml-max"))
							button.setAttribute("disabled", "disabled");
					}
					
					var clickRemoveButton = function(button) {
						if ((button.parentNode.parentNode.parentNode.children.length - 2) == button.parentNode.parentNode.parentNode.lastElementChild.getAttribute("data-xsd2html2xml-min"))
							button.parentNode.parentNode.parentNode.lastElementChild.click();
						
						if ((button.parentNode.parentNode.parentNode.children.length - 2) == button.parentNode.parentNode.parentNode.lastElementChild.getAttribute("data-xsd2html2xml-max"))
							button.parentNode.parentNode.parentNode.lastElementChild.removeAttribute("disabled");
						
						button.parentNode.parentNode.parentNode.removeChild(
							button.parentNode.parentNode
						);
					}
					
					var clickRadioInput = function(input, name) {
						document.querySelectorAll("[name=" + name + "]").forEach(function(o) {
							o.removeAttribute("checked");
							o.parentElement.nextElementSibling.querySelectorAll("input, select").forEach(function(p) {
								if (input.parentElement.nextElementSibling.contains(p))
									p.removeAttribute("disabled");
								else
									p.setAttribute("disabled", "disabled");
							});
						});
						input.setAttribute("checked","checked");
					}
					
					/* XML GENERATORS */
					
					var htmlToXML = function(root) {
					    var namespaces = [];
					    var prefixes = [];
					    
					    document.querySelectorAll("[data-xsd2html2xml-namespace]:not([data-xsd2html2xml-namespace=''])").forEach(function(o) {
					    	if (namespaces.indexOf(
					    		o.getAttribute("data-xsd2html2xml-namespace")
					    	) == -1) {
						    	namespaces.push(
						    		o.getAttribute("data-xsd2html2xml-namespace")
						    	);
						    	
						    	prefixes.push(
						    		o.getAttribute("data-xsd2html2xml-name").substring(
					    				0, o.getAttribute("data-xsd2html2xml-name").indexOf(":")
					    			)
					    		);
					    	}
					    });
					    
					    var namespaceString = "";
					    
					    namespaces.forEach(function(o,i) {
					    	namespaceString = namespaceString.concat(
					    		"xmlns".concat(
					    			(prefixes[i] == "" ? "=" : ":".concat(prefixes[i].concat("=")))
					    		).concat(
					    			"\"".concat(namespaces[i]).concat("\" ")
					    		)
					    	)
					    });
					    
					    return String.fromCharCode(60).concat("?xml version=\"1.0\"?").concat(String.fromCharCode(62)).concat(getXML(root, false, namespaceString.trim()));
					};
					
					var getXML = function(parent, attributesOnly, namespaceString) {
					    var xml = "";
					    var children = [].slice.call(parent.children);
					    children.forEach(function(o) {
					        if (!o.getAttribute("style")) {
					            switch (o.getAttribute("data-xsd2html2xml-type")) {
					                case "element":
					                    if (!attributesOnly) xml = xml.concat(String.fromCharCode(60)).concat(o.getAttribute("data-xsd2html2xml-name")).concat(getXML(o, true)).concat(String.fromCharCode(62)).concat(function() {
					                        if (o.nodeName.toLowerCase() === "label") {
					                            return getContent(o);
					                        } else return getXML(o)
					                    }()).concat(String.fromCharCode(60)).concat("/").concat(o.getAttribute("data-xsd2html2xml-name")).concat(String.fromCharCode(62));
					                    break;
					                case "attribute":
					                    if (attributesOnly)
											if (getContent(o))
												xml = xml.concat(" ").concat(o.getAttribute("data-xsd2html2xml-name")).concat("=\"").concat(getContent(o)).concat("\"");
					                    break;
					                case "cdata":
					                    if (!attributesOnly) xml = xml.concat(getContent(o));
					                    break;
					                default:
					                    if (!attributesOnly) {
					                    	if (!o.getAttribute("data-xsd2html2xml-choice"))
					                    		xml = xml.concat(getXML(o));
					                    		
					                    	if (o.getAttribute("data-xsd2html2xml-choice"))
					                    		if (o.previousElementSibling.getElementsByTagName("input")[0].checked)
					                    			xml = xml.concat(getXML(o));
					                    }
					                    break;
					            }
					        }
					    });
					    
					    if (namespaceString) {
					    	xml = xml.substring(0, xml.indexOf(String.fromCharCode(62))).concat(" ").concat(namespaceString).concat(xml.substring(xml.indexOf(String.fromCharCode(62))));
					    }
					    
					    return xml;
					};
					
					var getContent = function(node) {
					    if (node.getElementsByTagName("input").length != 0) {
					        switch (node.getElementsByTagName("input")[0].getAttribute("type").toLowerCase()) {
					            case "checkbox":
					                return node.getElementsByTagName("input")[0].checked;
					            case "file":
					            case "range":
					            case "date":
					            case "time":
					            case "datetime-local":
					            	return node.getElementsByTagName("input")[0].getAttribute("value");
					            default:
					            	switch (node.getElementsByTagName("input")[0].getAttribute("data-xsd2html2xml-primitive").toLowerCase()) {
							            case "xs:gday":
							            case "xs:gmonth":
							            case "xs:gmonthday":
							            case "xs:gyear":
							            case "xs:gyearmonth":
							            	return node.getElementsByTagName("input")[0].getAttribute("value");
							            default:
							            	return node.getElementsByTagName("input")[0].value;
					            	}
					        }
					    } else if (node.getElementsByTagName("select").length != 0) {
					        return node.getElementsByTagName("select")[0].value;
					    } else if (node.getElementsByTagName("textarea").length != 0) {
					    	return node.getElementsByTagName("textarea")[0].value;
					    }
					}
					
					/* INITIAL CALLS */
					
					document.querySelectorAll("[data-xsd2html2xml-filled='true']").forEach(function(o) {
						if (o.closest("[data-xsd2html2xml-choice]"))
							o.closest("[data-xsd2html2xml-choice]").previousElementSibling.querySelector("input[type='radio']").click();
					});
					</script></form></body></html>
